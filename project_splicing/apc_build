#!/usr/bin/env python3

import argparse
import glob
import json
import os
import re
import subprocess
import sys

from grimoire.genome import Reader


#######
# CLI #
#######

parser = argparse.ArgumentParser(
	description='dataset builder for apc algorithm')
parser.add_argument('build', type=str, metavar='<build>',
	help='path to gene build directory (e.g. ../genome_celegans/build/genes)')
parser.add_argument('--seqlen', type=int, metavar='<int>', default=1200,
	required=False, help='maximum sequence length [%(default)i]')
parser.add_argument('--rnaseq', type=int, metavar='<int>', default=100000,
	required=False, help='minimum RNAseq value [%(default)i]')
parser.add_argument('--splices', type=int, metavar='<int>', default=3,
	required=False, help='maximum number of splices per tx [%(default)i]')
parser.add_argument('--ilen', type=int, metavar='<int>', default=35,
	required=False, help='minimum intron length [%(default)i]')
parser.add_argument('--elen', type=int, metavar='<int>', default=25,
	required=False, help='minimum exon length [%(default)i]')
parser.add_argument('--flank', type=int, metavar='<int>', default=99,
	required=False, help='genomic flank length [%(default)i]')
parser.add_argument('--isoforms', type=int, metavar='<int>', default=1000000,
	required=False, help='maximum number of isoforms [%(default)i]')
parser.add_argument('--program', type=str, metavar='<str>',
	default='isocounter', required=False,
	help='isoform counting program [%(default)s]')
arg = parser.parse_args()


#############
# Functions #
#############

def isoforms(seq, maxs, minin, minex, flank):
	stuff = subprocess.run([arg.program, seq, '--max_splice', str(maxs),
		'--min_intron', str(minin), '--min_exon', str(minex),
		'--flank', str(flank)], capture_output=True, text=True).stdout
	f = stuff.split()
	return int(f[5])

subprocess.run(['ls', '-l'], capture_output=True, text=True).stdout

################
# Output Files # they are named :(
################

gfh = open("apc.genes.txt", "w")
lfh = open("apc.log.json", "w")

########
# Main #
########

gfh.write('# id\tlength\tintrons\tRNAseq\tisoforms\n')

log = {
	'long_gene': 0,
	'multiple_isoforms': 0,
	'no_introns': 0,
	'low_expression': 0,
	'short_intron': 0,
	'short_exon': 0,
	'nc_gene': 0,
	'too_many_isos': 0,
	'kept_genes': 0,
}

debug = 0
for ff in glob.glob(f'{arg.build}/*.fa'):
	debug += 1
	gf = ff[:-2] + 'gff3'

	genome = Reader(gff=gf, fasta=ff)
	chrom = next(genome) # there is only one in a gene build
	
	# filter 1: gene length (apc uses only very short genes)
	if len(chrom.seq) > arg.seqlen:
		log['long_gene'] += 1
		continue
	
	# find the protein-coding gene (as there may be some ncRNA genes in there)
	gene = None
	ncgene = False
	for g in chrom.ftable.build_genes():
		if g.is_coding():
			gene = g
		else:
			ncgene = True
	
	# filter 2: has a single annotated isoform
	if len(gene.transcripts()) > 1:
		log['multiple_isoforms'] += 1
		continue
	tx = gene.transcripts()[0]

	# filter 3: contain at least 1 intron
	if len(tx.introns) == 0:
		log['no_introns'] += 1
		continue

	# filter 4: highly expressed
	maxexp = 0
	for f in chrom.ftable.features:
		if f.source == 'RNASeq_splice' and f.score > maxexp:
			maxexp = int(f.score)
	if maxexp < arg.rnaseq:
		log['low_expression'] += 1
		continue
	
	# filter 5: no short introns
	short_intron = False
	for intron in tx.introns:
		if intron.length < arg.ilen:
			short_intron = True
			break
	if short_intron:
		log['short_intron'] += 1
		continue
		
	# filter 6: no short exons
	short_exon = False
	for exon in tx.exons:
		if exon.length < arg.elen:
			short_exon = True
			break
	if short_exon:
		log['short_exon'] += 1
		continue

	# filter 7: non-coding RNA gene
	if ncgene:
		log['nc_gene'] += 1
		continue

	# filter 7: isoform counts
	isos = isoforms(ff, arg.splices, arg.ilen, arg.elen, arg.flank)
	if isos > arg.isoforms:
		log['too_many_isos'] += 1
		continue
	
	gfh.write(f'{chrom.name}\t{len(chrom.seq)}\t{len(tx.introns)}\t{maxexp}\t{isos}\n')
	
	# made it!
	log['kept_genes'] += 1

	#if debug > 100: break
	
lfh.write(json.dumps(log, indent=4))
