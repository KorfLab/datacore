#!/usr/bin/env python3

import argparse
import glob
import os
import re
import subprocess
import sys

from grimoire.genome import Reader


#######
# CLI #
#######

parser = argparse.ArgumentParser(
	description='dataset builder for apc algorithm')
parser.add_argument('build', type=str, metavar='<build>',
	help='path to gene build directory (e.g. ../genome_celegans/build/genes)')
parser.add_argument('--seqlen', type=int, metavar='<int>', default=1200,
	required=False, help='maximum sequence length')
parser.add_argument('--rnaseq', type=int, metavar='<int>', default=100000,
	required=False, help='minimum RNAseq value')
parser.add_argument('--splices', type=int, metavar='<int>', default=3,
	required=False, help='maximum number of splices per transcript')
parser.add_argument('--ilen', type=int, metavar='<int>', default=35,
	required=False, help='minimum intron length')
parser.add_argument('--elen', type=int, metavar='<int>', default=25,
	required=False, help='minimum exon length')
parser.add_argument('--flank', type=int, metavar='<int>', default=99,
	required=False, help='genomic flank length')
parser.add_argument('--isoforms', type=int, metavar='<int>', default=1000000,
	required=False, help='maximum number of isoforms')
parser.add_argument('--program', type=str, metavar='<str>',
	default='isocounter', required=False, help='isoform counting program')
arg = parser.parse_args()


#############
# Functions #
#############

def isoforms(seq, maxs, minin, minex, flank):
	stuff = subprocess.run([arg.program, seq, '--max_splice', str(maxs),
		'--min_intron', str(minin), '--min_exon', str(minex),
		'--flank', str(flank)], capture_output=True, text=True).stdout
	f = stuff.split()
	return int(f[5])

subprocess.run(['ls', '-l'], capture_output=True, text=True).stdout

########
# Main #
########

print('# id\tlength\tintrons\tRNAseq\tisoforms')
debug = 0
for ff in glob.glob(f'{arg.build}/*.fa'):
	gf = ff[:-2] + 'gff3'

	genome = Reader(gff=gf, fasta=ff)
	chrom = next(genome) # there is only one in a gene build
	if len(chrom.seq) > arg.seqlen: continue # short genes only in apc

	for gene in chrom.ftable.build_genes(): # could be non-coding stuff
		if not gene.is_coding(): continue
		if gene.issues:
			print('requires genes without issues')
			sys.exit(1)

		# intron counts
		ints = 0
		for tx in gene.transcripts():
			if len(tx.introns) > ints: ints = len(tx.introns)
		if ints == 0: continue # need at least 1 intron (what if...)

		# expression
		maxexp = 0
		for f in chrom.ftable.features:
			if f.source == 'RNASeq_splice' and f.score > maxexp:
				maxexp = int(f.score)
		if maxexp < arg.rnaseq: continue

		# isoform counts
		isos = isoforms(ff, arg.splices, arg.ilen, arg.elen, arg.flank)
		if isos > arg.isoforms: continue

		print(f'{chrom.name}\t{len(chrom.seq)}\t{ints}\t{maxexp}\t{isos}\t')
